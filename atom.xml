<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asdgbc</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asdgbc.github.io/"/>
  <updated>2017-03-31T15:40:03.000Z</updated>
  <id>https://asdgbc.github.io/</id>
  
  <author>
    <name>asdgbc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventBus使用简介</title>
    <link href="https://asdgbc.github.io/2017/03/31/EventBus%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://asdgbc.github.io/2017/03/31/EventBus使用简介/</id>
    <published>2017-03-31T15:39:40.000Z</published>
    <updated>2017-03-31T15:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就知道EventBus了，只不过一直没时间去了解，最近在做一个项目频繁的使用到Activity之间的数据交互，发现使用startActivityForResult是一件非常痛苦的事情，尤其是在多层Activity之间传递数据。正好趁这几天放假，了解了一下EventBus的大概使用方式，写下这篇博客，当做一个总结。</p>
<p>三步走：</p>
<ol>
<li>在EventBus中注册</li>
<li>写回调方法</li>
<li>发送消息</li>
</ol>
<p>一、在使用EventBus之前你必须将当前的类(是的，类，常见的就是我们所使用的Activity以及Fragment等)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 使用默认的EventBus实例进行注册</div><div class="line">EventBus.getDefault().register(this)</div></pre></td></tr></table></figure></p>
<p>当然你也可以重新创建一个EventBus实例进行注册，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = new EventBus();</div><div class="line">eventBus.register(this);</div></pre></td></tr></table></figure></p>
<p>然后别忘了还要在适当的时候进行注销<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(this);</div></pre></td></tr></table></figure></p>
<p>二、为了能够接受到EventBus发送过来的消息，我们得写几个方法，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void onEvent(String msg) &#123;</div><div class="line">    Logger.e(&quot;onEvent:&quot; + msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void onEventAsync(String msg) &#123;</div><div class="line">    Logger.e(&quot;onEventAsync:&quot; + msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void onEventMainThread(String msg) &#123;</div><div class="line">    Logger.e(&quot;onEventMainThread:&quot; + msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void onEventBackgroundThread(String msg) &#123;</div><div class="line">    Logger.e(&quot;onEventBackgroundThread:&quot; + msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有几个要注意的地方</p>
<p>1、方法必须为public，为什么要public？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)</div></pre></td></tr></table></figure></p>
<p>这是源码中SubscriberMethodFinder类findSubscriberMethods方法中的一段注释，别问我为什么。。。</p>
<p>2、方法名必须要以onEvent开头，后面跟MainThread、BackgroundThread、Async或者就以onEvent为方法名，否则会抛出一个EventBusException异常。(当然，我们可以通过使用EventBusBuilder的方式创建EventBus实例，在创建之前通过调用EventBusBuilder中的skipMethodVerificationFor方法就可以了。)<br>Ok，也就是说EventBus规定了回调的四种方法名，即：onEvent、onEventMainThread、onEventBackgroundThread、onEventAsync。其实这四种方法的回调是有区别的。下面我们来看看枚举ThreadMode中的几个类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 对应onEvent方法的回调</div><div class="line"> * 也就是说onEvent会在调用post方法的线程中被回调</div><div class="line"> * 注:不用切换线程进行调用，开销最小，不过应尽快返回，以免可能阻塞主线程</div><div class="line"> */</div><div class="line">PostThread,</div><div class="line"></div><div class="line">/*</div><div class="line"> * 对应onEventMainThread方法的回调</div><div class="line"> * 在Android主线程(UI线程)中被回调</div><div class="line"> * 注:尽快返回，以免阻塞主线程</div><div class="line"> */</div><div class="line">MainThread,</div><div class="line"></div><div class="line">/*</div><div class="line"> * 对应onEventBackgroundThread方法的回调</div><div class="line"> * 在主线程中post:会另起一个线程进行回调</div><div class="line"> * 在线程中post:在post所在的线程中被回调</div><div class="line"> * 注:使用这种模式时应尽快返回，防止阻塞线程</div><div class="line"> */</div><div class="line">BackgroundThread,</div><div class="line"></div><div class="line">/*</div><div class="line"> * 对应onEventAsync方法的回调</div><div class="line"> * 在一个独立的线程中被回调(独立于主线程以及post方法被调用的线程)</div><div class="line"> * 注:适用于执行一些耗时操作</div><div class="line"> */</div><div class="line">Async</div></pre></td></tr></table></figure>
<p>好了，知道这几种方法在什么时候被调用，我们就可以根据具体场景选择不同的回调方法。</p>
<p>3、回调方法的参数只能为1个，否则是无法正常回调的</p>
<p>三、调用post发送消息，就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(&quot;Msg From SecondActivity in UIThread&quot;);</div></pre></td></tr></table></figure></p>
<p>这里注意一下，post方法的参数需要与onEvent系列方法的参数匹配，否则是无法正常回调的。</p>
<p>以下是本人写的一个非常简单的Demo：<br><a href="https://github.com/asdgbc/AndroidDemos.git" target="_blank" rel="external">https://github.com/asdgbc/AndroidDemos.git</a></p>
<p>最后，享受EventBus带来的便利吧。</p>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早之前就知道EventBus了，只不过一直没时间去了解，最近在做一个项目频繁的使用到Activity之间的数据交互，发现使用startActivityForResult是一件非常痛苦的事情，尤其是在多层Activity之间传递数据。正好趁这几天放假，了解了一下EventB
    
    </summary>
    
    
  </entry>
  
</feed>
